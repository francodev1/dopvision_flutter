// lib/core/services/google_ai_service.dart
import 'dart:typed_data';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/env_config.dart';
import '../utils/logger.dart';
import '../exceptions/app_exception.dart';

/// ü§ñ Google AI Service (Gemini)
/// 
/// Integra√ß√£o com Gemini para:
/// - Alternativa ao ChatGPT
/// - An√°lise de imagens
/// - Gera√ß√£o de conte√∫do
class GoogleAIService {
  late final GenerativeModel _model;

  GoogleAIService({String model = 'gemini-pro'}) {
    _initialize(model);
  }

  void _initialize(String modelName) {
    _model = GenerativeModel(
      model: modelName,
      apiKey: EnvConfig.geminiApiKey,
    );
  }

  // ============================================
  // üí¨ Text Generation
  // ============================================

  /// Gera conte√∫do de texto
  Future<String> generateContent({
    required String prompt,
    double temperature = 0.7,
  }) async {
    try {
      AppLogger.logAI('gemini_generate', {
        'prompt_length': prompt.length,
      });

      final content = [Content.text(prompt)];
      final response = await _model.generateContent(content);

      final text = response.text ?? '';

      AppLogger.logAI('gemini_response', {
        'response_length': text.length,
      });

      return text;
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro no Google AI', e, stack);
      throw AIException('Erro ao processar com Gemini: $e');
    }
  }

  /// Gera√ß√£o com streaming
  Stream<String> generateContentStream({
    required String prompt,
  }) async* {
    try {
      final content = [Content.text(prompt)];
      final stream = _model.generateContentStream(content);

      await for (final chunk in stream) {
        final text = chunk.text;
        if (text != null) {
          yield text;
        }
      }
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro no stream do Gemini', e, stack);
      throw AIException('Erro ao processar stream: $e');
    }
  }

  /// Chat multi-turno
  Future<String> chat({
    required List<ChatMessage> history,
    required String message,
  }) async {
    try {
      final chatSession = _model.startChat(
        history: history.map((msg) {
          return Content(
            msg.role,
            [TextPart(msg.content)],
          );
        }).toList(),
      );

      final response = await chatSession.sendMessage(
        Content.text(message),
      );

      return response.text ?? '';
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro no chat do Gemini', e, stack);
      throw AIException('Erro no chat: $e');
    }
  }

  // ============================================
  // üñºÔ∏è Vision (gemini-pro-vision)
  // ============================================

  /// Analisa imagem
  Future<String> analyzeImage({
    required List<int> imageBytes,
    required String prompt,
  }) async {
    try {
      // Usar modelo com vis√£o
      final visionModel = GenerativeModel(
        model: 'gemini-pro-vision',
        apiKey: EnvConfig.geminiApiKey,
      );

      final content = [
        Content.multi([
          TextPart(prompt),
          DataPart('image/jpeg', Uint8List.fromList(imageBytes)),
        ])
      ];

      final response = await visionModel.generateContent(content);
      return response.text ?? '';
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro na an√°lise de imagem', e, stack);
      throw AIException('Erro ao analisar imagem: $e');
    }
  }

  // ============================================
  // üìù Fun√ß√µes Especializadas - DoPVision
  // ============================================

  /// Gera copy para an√∫ncio
  Future<String> generateAdCopy({
    required String productName,
    required String productDescription,
    required String targetAudience,
    required String platform,
    String? tone,
  }) async {
    final prompt = '''
Gere uma copy persuasiva para an√∫ncio de tr√°fego pago:

**Produto/Servi√ßo:** $productName
**Descri√ß√£o:** $productDescription
**P√∫blico-Alvo:** $targetAudience
**Plataforma:** $platform
${tone != null ? '**Tom:** $tone' : ''}

Gere:
1. T√≠tulo principal (chamativo, max 40 caracteres)
2. Descri√ß√£o (persuasiva, max 90 caracteres)
3. Call-to-Action (direto, max 20 caracteres)
4. 3 varia√ß√µes do t√≠tulo
5. 3 hashtags relevantes
''';

    return await generateContent(prompt: prompt, temperature: 0.8);
  }

  /// Analisa criativo de an√∫ncio (imagem)
  Future<String> analyzeAdCreative({
    required List<int> imageBytes,
  }) async {
    return await analyzeImage(
      imageBytes: imageBytes,
      prompt: '''
Analise este criativo de an√∫ncio de tr√°fego pago:

Avalie:
1. Qualidade visual e composi√ß√£o
2. Clareza da mensagem
3. Apelo emocional
4. Call-to-action vis√≠vel
5. Adequa√ß√£o para plataformas de ads

Forne√ßa:
- Nota de 0-10
- Pontos fortes
- Pontos de melhoria
- Sugest√µes de otimiza√ß√£o
''',
    );
  }

  /// Analisa performance de campanha
  Future<String> analyzeCampaign({
    required Map<String, dynamic> campaignData,
    required Map<String, dynamic> metricsData,
  }) async {
    final prompt = '''
Analise a performance desta campanha de tr√°fego pago:

**Dados da Campanha:**
${_formatData(campaignData)}

**M√©tricas:**
${_formatData(metricsData)}

Forne√ßa:
1. An√°lise geral da performance
2. Pontos fortes
3. Pontos de aten√ß√£o
4. 3 sugest√µes pr√°ticas de otimiza√ß√£o
5. Previs√£o de resultados
''';

    return await generateContent(prompt: prompt, temperature: 0.5);
  }

  /// Gera insights de dados
  Future<String> generateInsights({
    required String metricType,
    required List<Map<String, dynamic>> dataPoints,
  }) async {
    final prompt = '''
Analise estes dados de $metricType e gere insights:

**Dados:**
${dataPoints.map(_formatData).join('\n---\n')}

Forne√ßa:
1. Tend√™ncias identificadas
2. Padr√µes relevantes
3. Anomalias ou oportunidades
4. Recomenda√ß√µes estrat√©gicas
''';

    return await generateContent(prompt: prompt, temperature: 0.4);
  }

  /// Sugere melhorias em texto
  Future<String> improveText({
    required String text,
    required String context, // copy de an√∫ncio, email, post, etc
  }) async {
    final prompt = '''
Melhore este texto de $context:

**Texto Original:**
$text

Forne√ßa:
1. Vers√£o melhorada
2. Explica√ß√£o das mudan√ßas
3. 2 varia√ß√µes alternativas
''';

    return await generateContent(prompt: prompt, temperature: 0.7);
  }

  // ============================================
  // üõ†Ô∏è Utilit√°rios
  // ============================================

  String _formatData(Map<String, dynamic> data) {
    return data.entries.map((e) => '- ${e.key}: ${e.value}').join('\n');
  }
}

// ============================================
// üìã Helper Classes
// ============================================

class ChatMessage {
  final String role; // 'user' ou 'model'
  final String content;

  ChatMessage({
    required this.role,
    required this.content,
  });
}

// ============================================
// üéØ Riverpod Provider
// ============================================

final googleAIServiceProvider = Provider<GoogleAIService>((ref) {
  return GoogleAIService();
});
