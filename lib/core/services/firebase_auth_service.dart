// lib/core/services/firebase_auth_service.dart
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../exceptions/app_exception.dart';
import '../utils/logger.dart';
import '../utils/error_handler.dart';

/// üîê Firebase Auth Service
/// 
/// Servi√ßo de autentica√ß√£o com Firebase.
/// Gerencia login, registro, recupera√ß√£o de senha e estado de autentica√ß√£o.
class FirebaseAuthService {
  final FirebaseAuth _auth;

  FirebaseAuthService({FirebaseAuth? auth})
      : _auth = auth ?? FirebaseAuth.instance;

  /// Stream do usu√°rio atual
  Stream<User?> get authStateChanges => _auth.authStateChanges();

  /// Usu√°rio atual (s√≠ncrono)
  User? get currentUser => _auth.currentUser;

  /// Verifica se est√° autenticado
  bool get isAuthenticated => currentUser != null;

  /// UID do usu√°rio atual
  String? get userId => currentUser?.uid;

  // ============================================
  // üìß Login com Email/Senha
  // ============================================

  /// Faz login com email e senha
  Future<UserCredential> signInWithEmailAndPassword({
    required String email,
    required String password,
  }) async {
    try {
      AppLogger.info('üîê Tentando login: $email');

      final credential = await _auth.signInWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );

      AppLogger.info('‚úÖ Login bem-sucedido: ${credential.user?.email}');
      return credential;
    } on FirebaseAuthException catch (e) {
      AppLogger.error('‚ùå Erro no login', e);
      throw ErrorHandler.handle(e);
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro inesperado no login', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  // ============================================
  // üìù Registro
  // ============================================

  /// Registra novo usu√°rio com email e senha
  Future<UserCredential> createUserWithEmailAndPassword({
    required String email,
    required String password,
    String? displayName,
  }) async {
    try {
      AppLogger.info('üìù Criando novo usu√°rio: $email');

      final credential = await _auth.createUserWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );

      // Atualiza o nome se fornecido
      if (displayName != null && displayName.isNotEmpty) {
        await credential.user?.updateDisplayName(displayName);
      }

      // Envia email de verifica√ß√£o
      await credential.user?.sendEmailVerification();

      AppLogger.info('‚úÖ Usu√°rio criado: ${credential.user?.email}');
      return credential;
    } on FirebaseAuthException catch (e) {
      AppLogger.error('‚ùå Erro ao criar usu√°rio', e);
      throw ErrorHandler.handle(e);
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro inesperado ao criar usu√°rio', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  // ============================================
  // üîë Recupera√ß√£o de Senha
  // ============================================

  /// Envia email de recupera√ß√£o de senha
  Future<void> sendPasswordResetEmail({required String email}) async {
    try {
      AppLogger.info('üìß Enviando email de recupera√ß√£o: $email');

      await _auth.sendPasswordResetEmail(email: email.trim());

      AppLogger.info('‚úÖ Email de recupera√ß√£o enviado');
    } on FirebaseAuthException catch (e) {
      AppLogger.error('‚ùå Erro ao enviar email de recupera√ß√£o', e);
      throw ErrorHandler.handle(e);
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro inesperado ao enviar email', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  // ============================================
  // üö™ Logout
  // ============================================

  /// Faz logout do usu√°rio
  Future<void> signOut() async {
    try {
      AppLogger.info('üö™ Fazendo logout');
      await _auth.signOut();
      AppLogger.info('‚úÖ Logout realizado');
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro ao fazer logout', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  // ============================================
  // üìß Verifica√ß√£o de Email
  // ============================================

  /// Verifica se o email foi verificado
  bool get isEmailVerified => currentUser?.emailVerified ?? false;

  /// Envia email de verifica√ß√£o
  Future<void> sendEmailVerification() async {
    try {
      AppLogger.info('üìß Enviando email de verifica√ß√£o');
      await currentUser?.sendEmailVerification();
      AppLogger.info('‚úÖ Email de verifica√ß√£o enviado');
    } on FirebaseAuthException catch (e) {
      AppLogger.error('‚ùå Erro ao enviar email de verifica√ß√£o', e);
      throw ErrorHandler.handle(e);
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro inesperado', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  /// Recarrega dados do usu√°rio
  Future<void> reloadUser() async {
    try {
      await currentUser?.reload();
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro ao recarregar usu√°rio', e, stack);
    }
  }

  // ============================================
  // üë§ Atualiza√ß√£o de Perfil
  // ============================================

  /// Atualiza nome do usu√°rio
  Future<void> updateDisplayName(String displayName) async {
    try {
      AppLogger.info('üë§ Atualizando nome: $displayName');
      await currentUser?.updateDisplayName(displayName);
      await reloadUser();
      AppLogger.info('‚úÖ Nome atualizado');
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro ao atualizar nome', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  /// Atualiza foto do usu√°rio
  Future<void> updatePhotoURL(String photoURL) async {
    try {
      AppLogger.info('üì∏ Atualizando foto');
      await currentUser?.updatePhotoURL(photoURL);
      await reloadUser();
      AppLogger.info('‚úÖ Foto atualizada');
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro ao atualizar foto', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  /// Atualiza email do usu√°rio
  Future<void> updateEmail(String newEmail) async {
    try {
      AppLogger.info('üìß Atualizando email');
      await currentUser?.verifyBeforeUpdateEmail(newEmail);
      AppLogger.info('‚úÖ Email de verifica√ß√£o enviado');
    } on FirebaseAuthException catch (e) {
      AppLogger.error('‚ùå Erro ao atualizar email', e);
      throw ErrorHandler.handle(e);
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro inesperado', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  /// Atualiza senha do usu√°rio
  Future<void> updatePassword(String newPassword) async {
    try {
      AppLogger.info('üîë Atualizando senha');
      await currentUser?.updatePassword(newPassword);
      AppLogger.info('‚úÖ Senha atualizada');
    } on FirebaseAuthException catch (e) {
      AppLogger.error('‚ùå Erro ao atualizar senha', e);
      throw ErrorHandler.handle(e);
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro inesperado', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  // ============================================
  // üóëÔ∏è Exclus√£o de Conta
  // ============================================

  /// Deleta a conta do usu√°rio
  Future<void> deleteAccount() async {
    try {
      AppLogger.warning('üóëÔ∏è Deletando conta do usu√°rio');
      await currentUser?.delete();
      AppLogger.info('‚úÖ Conta deletada');
    } on FirebaseAuthException catch (e) {
      AppLogger.error('‚ùå Erro ao deletar conta', e);
      throw ErrorHandler.handle(e);
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro inesperado', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  // ============================================
  // üîÑ Reautentica√ß√£o
  // ============================================

  /// Reautentica o usu√°rio (necess√°rio para opera√ß√µes sens√≠veis)
  Future<void> reauthenticateWithPassword(String password) async {
    try {
      final user = currentUser;
      if (user == null) {
        throw AuthException.notAuthenticated();
      }

      final credential = EmailAuthProvider.credential(
        email: user.email!,
        password: password,
      );

      await user.reauthenticateWithCredential(credential);
      AppLogger.info('‚úÖ Reautentica√ß√£o bem-sucedida');
    } on FirebaseAuthException catch (e) {
      AppLogger.error('‚ùå Erro na reautentica√ß√£o', e);
      throw ErrorHandler.handle(e);
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro inesperado na reautentica√ß√£o', e, stack);
      throw ErrorHandler.handle(e);
    }
  }

  // ============================================
  // üîó Link de Contas
  // ============================================

  /// Vincula conta com email/senha
  Future<UserCredential> linkWithEmailAndPassword({
    required String email,
    required String password,
  }) async {
    try {
      final credential = EmailAuthProvider.credential(
        email: email,
        password: password,
      );

      final userCredential = await currentUser!.linkWithCredential(credential);
      AppLogger.info('‚úÖ Conta vinculada com sucesso');
      return userCredential;
    } on FirebaseAuthException catch (e) {
      AppLogger.error('‚ùå Erro ao vincular conta', e);
      throw ErrorHandler.handle(e);
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro inesperado', e, stack);
      throw ErrorHandler.handle(e);
    }
  }
}

// ============================================
// üéØ Riverpod Providers
// ============================================

/// Provider do FirebaseAuthService
final firebaseAuthServiceProvider = Provider<FirebaseAuthService>((ref) {
  return FirebaseAuthService();
});

/// Provider do estado de autentica√ß√£o
final authStateProvider = StreamProvider<User?>((ref) {
  final authService = ref.watch(firebaseAuthServiceProvider);
  return authService.authStateChanges;
});

/// Provider do usu√°rio atual
final currentUserProvider = Provider<User?>((ref) {
  final authState = ref.watch(authStateProvider);
  return authState.value;
});

/// Provider para verificar se est√° autenticado
final isAuthenticatedProvider = Provider<bool>((ref) {
  final user = ref.watch(currentUserProvider);
  return user != null;
});
