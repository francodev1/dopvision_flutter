// lib/core/services/openai_service.dart
import 'package:dart_openai/dart_openai.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/env_config.dart';
import '../utils/logger.dart';
import '../exceptions/app_exception.dart';

/// ü§ñ OpenAI Service
/// 
/// Integra√ß√£o com ChatGPT para:
/// - Gera√ß√£o de copies de an√∫ncios
/// - An√°lise de campanhas
/// - Sugest√µes de otimiza√ß√£o
/// - Insights de dados
class OpenAIService {
  OpenAIService() {
    _initialize();
  }

  void _initialize() {
    OpenAI.apiKey = EnvConfig.openaiApiKey;
    OpenAI.organization = EnvConfig.openaiOrgId;
  }

  // ============================================
  // üí¨ Chat Completion
  // ============================================

  /// Envia mensagem e recebe resposta
  Future<String> chat({
    required String message,
    List<OpenAIChatCompletionChoiceMessageModel>? history,
    String model = 'gpt-4-turbo-preview',
    double temperature = 0.7,
    int maxTokens = 1000,
  }) async {
    try {
      AppLogger.logAI('chat_completion', {
        'model': model,
        'prompt_length': message.length,
      });

      final messages = [
        if (history != null) ...history,
        OpenAIChatCompletionChoiceMessageModel(
          role: OpenAIChatMessageRole.user,
          content: [OpenAIChatCompletionChoiceMessageContentItemModel.text(message)],
        ),
      ];

      final completion = await OpenAI.instance.chat.create(
        model: model,
        messages: messages,
        temperature: temperature,
        maxTokens: maxTokens,
      );

      final response = completion.choices.first.message.content?.first.text ?? '';

      AppLogger.logAI('chat_response', {
        'response_length': response.length,
      });

      return response;
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro no OpenAI', e, stack);
      throw AIException('Erro ao processar com OpenAI: $e');
    }
  }

  /// Chat com streaming
  Stream<String> chatStream({
    required String message,
    List<OpenAIChatCompletionChoiceMessageModel>? history,
    String model = 'gpt-4-turbo-preview',
    double temperature = 0.7,
  }) async* {
    try {
      final messages = [
        if (history != null) ...history,
        OpenAIChatCompletionChoiceMessageModel(
          role: OpenAIChatMessageRole.user,
          content: [OpenAIChatCompletionChoiceMessageContentItemModel.text(message)],
        ),
      ];

      final stream = OpenAI.instance.chat.createStream(
        model: model,
        messages: messages,
        temperature: temperature,
      );

      // TODO: Fix type issues with dart_openai streaming
      await for (final chunk in stream) {
        final content = chunk.choices.first.delta.content;
        if (content != null && content.isNotEmpty) {
          // Workaround: converter para string diretamente
          yield content.toString();
        }
      }
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro no stream do OpenAI', e, stack);
      throw AIException('Erro ao processar stream: $e');
    }
  }

  // ============================================
  // üìù Fun√ß√µes Especializadas - DoPVision
  // ============================================

  /// Gera copy para an√∫ncio
  Future<AdCopyResponse> generateAdCopy({
    required String productName,
    required String productDescription,
    required String targetAudience,
    required String platform, // facebook, instagram, google, etc
    String? tone, // profissional, casual, engra√ßado, etc
  }) async {
    final prompt = '''
Gere uma copy persuasiva para an√∫ncio de tr√°fego pago:

**Produto/Servi√ßo:** $productName
**Descri√ß√£o:** $productDescription
**P√∫blico-Alvo:** $targetAudience
**Plataforma:** $platform
${tone != null ? '**Tom:** $tone' : ''}

Gere:
1. T√≠tulo principal (chamativo, max 40 caracteres)
2. Descri√ß√£o (persuasiva, max 90 caracteres)
3. Call-to-Action (direto, max 20 caracteres)
4. 3 varia√ß√µes do t√≠tulo
5. 3 hashtags relevantes

Formato JSON:
{
  "mainTitle": "...",
  "description": "...",
  "cta": "...",
  "titleVariations": ["...", "...", "..."],
  "hashtags": ["#...", "#...", "#..."]
}
''';

    await chat(
      message: prompt,
      model: 'gpt-4-turbo-preview',
      temperature: 0.8,
    );

    // TODO: Implementar parsing do JSON da resposta
    // Por enquanto retornando placeholder
    return AdCopyResponse(
      mainTitle: 'T√≠tulo gerado',
      description: 'Descri√ß√£o gerada',
      cta: 'CTA gerado',
      titleVariations: ['V1', 'V2', 'V3'],
      hashtags: ['#hashtag1', '#hashtag2', '#hashtag3'],
    );
  }

  /// Analisa performance de campanha
  Future<String> analyzeCampaign({
    required Map<String, dynamic> campaignData,
    required Map<String, dynamic> metricsData,
  }) async {
    final prompt = '''
Analise a performance desta campanha de tr√°fego pago:

**Dados da Campanha:**
${_formatJson(campaignData)}

**M√©tricas:**
${_formatJson(metricsData)}

Forne√ßa:
1. An√°lise geral da performance
2. Pontos fortes
3. Pontos de aten√ß√£o
4. 3 sugest√µes pr√°ticas de otimiza√ß√£o
5. Previs√£o de resultados se aplicar as sugest√µes
''';

    return await chat(
      message: prompt,
      model: 'gpt-4-turbo-preview',
      temperature: 0.5,
      maxTokens: 1500,
    );
  }

  /// Sugere segmenta√ß√£o de p√∫blico
  Future<String> suggestAudienceSegmentation({
    required String productType,
    required String businessNiche,
    String? currentAudience,
  }) async {
    final prompt = '''
Sugira segmenta√ß√µes de p√∫blico para tr√°fego pago:

**Tipo de Produto:** $productType
**Nicho:** $businessNiche
${currentAudience != null ? '**P√∫blico Atual:** $currentAudience' : ''}

Forne√ßa:
1. 3 segmenta√ß√µes detalhadas (demografia, interesses, comportamento)
2. Estimativa de tamanho de cada p√∫blico
3. Melhor plataforma para cada segmenta√ß√£o
4. Budget sugerido inicial
''';

    return await chat(
      message: prompt,
      model: 'gpt-4-turbo-preview',
      temperature: 0.6,
      maxTokens: 1200,
    );
  }

  /// Gera insights de dados
  Future<String> generateInsights({
    required String metricType, // vendas, leads, roi, etc
    required List<Map<String, dynamic>> dataPoints,
  }) async {
    final prompt = '''
Analise estes dados de $metricType e gere insights acion√°veis:

**Dados:**
${dataPoints.map((d) => _formatJson(d)).join('\n')}

Forne√ßa:
1. Tend√™ncias identificadas
2. Padr√µes relevantes
3. Anomalias ou oportunidades
4. Recomenda√ß√µes estrat√©gicas
''';

    return await chat(
      message: prompt,
      model: 'gpt-4-turbo-preview',
      temperature: 0.4,
      maxTokens: 1000,
    );
  }

  // ============================================
  // üõ†Ô∏è Utilit√°rios
  // ============================================

  String _formatJson(Map<String, dynamic> data) {
    return data.entries.map((e) => '- ${e.key}: ${e.value}').join('\n');
  }
}

// ============================================
// üìã Response Models
// ============================================

class AdCopyResponse {
  final String mainTitle;
  final String description;
  final String cta;
  final List<String> titleVariations;
  final List<String> hashtags;

  AdCopyResponse({
    required this.mainTitle,
    required this.description,
    required this.cta,
    required this.titleVariations,
    required this.hashtags,
  });
}

// ============================================
// üéØ Riverpod Provider
// ============================================

final openAIServiceProvider = Provider<OpenAIService>((ref) {
  return OpenAIService();
});
