// lib/core/services/sync_service.dart
import 'dart:async';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'connectivity_service.dart';
import '../utils/logger.dart';
import '../exceptions/app_exception.dart';

/// üîÑ Sync Service
/// 
/// Gerencia sincroniza√ß√£o offline-first entre cache local e Firestore
class SyncService {
  final ConnectivityService _connectivity;
  
  final StreamController<SyncStatus> _statusController;
  Timer? _syncTimer;
  bool _isSyncing = false;

  SyncService({
    required ConnectivityService connectivity,
  })  : _connectivity = connectivity,
        _statusController = StreamController<SyncStatus>.broadcast() {
    _initialize();
  }

  void _initialize() {
    // Monitorar mudan√ßas de conectividade
    _connectivity.onConnectivityChanged.listen((status) {
      if (status != ConnectivityStatus.disconnected) {
        AppLogger.info('‚úÖ Conex√£o restaurada, iniciando sync');
        sync();
      }
    });

    // Sync peri√≥dico (a cada 5 minutos)
    _syncTimer = Timer.periodic(const Duration(minutes: 5), (_) {
      sync();
    });
  }

  // ============================================
  // üîÑ Sincroniza√ß√£o
  // ============================================

  /// Stream de status de sync
  Stream<SyncStatus> get onSyncStatusChanged => _statusController.stream;

  /// Est√° sincronizando?
  bool get isSyncing => _isSyncing;

  /// Sincroniza dados pendentes
  Future<void> sync({bool force = false}) async {
    // Evitar sync simult√¢neo
    if (_isSyncing && !force) {
      AppLogger.info('‚è≠Ô∏è Sync j√° em andamento, ignorando');
      return;
    }

    // Verificar conectividade
    if (!await _connectivity.isConnected) {
      AppLogger.warning('‚ö†Ô∏è Sem conex√£o, sync adiado');
      _updateStatus(SyncStatus.waitingForConnection);
      return;
    }

    _isSyncing = true;
    _updateStatus(SyncStatus.syncing);

    try {
      AppLogger.info('üîÑ Iniciando sincroniza√ß√£o');

      // 1. Sync pend√™ncias (uploads locais ‚Üí Firestore)
      await _syncPendingUploads();

      // 2. Sync dados remotos (Firestore ‚Üí local cache)
      await _syncRemoteData();

      AppLogger.info('‚úÖ Sincroniza√ß√£o conclu√≠da');
      _updateStatus(SyncStatus.success);
    } on SyncException catch (e) {
      AppLogger.error('‚ùå Erro na sincroniza√ß√£o', e);
      _updateStatus(SyncStatus.error);
      rethrow;
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro inesperado no sync', e, stack);
      _updateStatus(SyncStatus.error);
      throw SyncException('Erro ao sincronizar: $e');
    } finally {
      _isSyncing = false;
    }
  }

  /// Sync apenas upload (local ‚Üí remoto)
  Future<void> syncUpload() async {
    if (!await _connectivity.isConnected) {
      throw SyncException('Sem conex√£o para upload');
    }

    _updateStatus(SyncStatus.uploading);
    await _syncPendingUploads();
    _updateStatus(SyncStatus.success);
  }

  /// Sync apenas download (remoto ‚Üí local)
  Future<void> syncDownload() async {
    if (!await _connectivity.isConnected) {
      throw SyncException('Sem conex√£o para download');
    }

    _updateStatus(SyncStatus.downloading);
    await _syncRemoteData();
    _updateStatus(SyncStatus.success);
  }

  // ============================================
  // üì§ Upload de Pend√™ncias
  // ============================================

  Future<void> _syncPendingUploads() async {
    try {
      AppLogger.info('üì§ Sincronizando pend√™ncias locais');

      // TODO: Implementar l√≥gica espec√≠fica
      // 1. Buscar opera√ß√µes pendentes do cache local (Hive)
      // 2. Para cada opera√ß√£o:
      //    - Tentar executar no Firestore
      //    - Se sucesso, remover do cache de pend√™ncias
      //    - Se erro, manter no cache para retry

      // Exemplo (pseudo-c√≥digo):
      // final pendingOps = await _localCache.getPendingOperations();
      // for (final op in pendingOps) {
      //   try {
      //     await _executePendingOperation(op);
      //     await _localCache.removePendingOperation(op.id);
      //   } catch (e) {
      //     AppLogger.warning('‚ö†Ô∏è Falha ao sync opera√ß√£o ${op.id}');
      //   }
      // }

      AppLogger.info('‚úÖ Upload de pend√™ncias conclu√≠do');
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro no upload de pend√™ncias', e, stack);
      rethrow;
    }
  }

  // ============================================
  // üì• Download de Dados Remotos
  // ============================================

  Future<void> _syncRemoteData() async {
    try {
      AppLogger.info('üì• Baixando dados remotos');

      // TODO: Implementar l√≥gica espec√≠fica
      // 1. Buscar timestamp do √∫ltimo sync
      // 2. Buscar dados modificados ap√≥s esse timestamp
      // 3. Atualizar cache local com novos dados
      // 4. Atualizar timestamp do √∫ltimo sync

      // Exemplo (pseudo-c√≥digo):
      // final lastSync = await _localCache.getLastSyncTimestamp();
      // 
      // final newClients = await _clientRepo.getWhere(
      //   filters: [QueryFilter(field: 'updatedAt', isGreaterThan: lastSync)],
      // );
      // await _localCache.saveClients(newClients);
      //
      // await _localCache.setLastSyncTimestamp(DateTime.now());

      AppLogger.info('‚úÖ Download de dados conclu√≠do');
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro no download de dados', e, stack);
      rethrow;
    }
  }

  // ============================================
  // üéØ Sync Espec√≠fico
  // ============================================

  /// Sincroniza clientes
  Future<void> syncClients({String? userId}) async {
    AppLogger.info('üë• Sincronizando clientes');
    // TODO: Implementar sync espec√≠fico de clientes
  }

  /// Sincroniza campanhas
  Future<void> syncCampaigns({String? clientId}) async {
    AppLogger.info('üì¢ Sincronizando campanhas');
    // TODO: Implementar sync espec√≠fico de campanhas
  }

  /// Sincroniza vendas
  Future<void> syncSales({String? campaignId}) async {
    AppLogger.info('üí∞ Sincronizando vendas');
    // TODO: Implementar sync espec√≠fico de vendas
  }

  // ============================================
  // üîî Notifica√ß√µes de Sync
  // ============================================

  void _updateStatus(SyncStatus status) {
    _statusController.add(status);
    AppLogger.logSync('status_change: ${status.name}');
  }

  // ============================================
  // üõ†Ô∏è Utilit√°rios
  // ============================================

  /// Limpa cache local
  Future<void> clearCache() async {
    try {
      AppLogger.warning('üóëÔ∏è Limpando cache local');
      // TODO: Implementar limpeza do cache
      AppLogger.info('‚úÖ Cache limpo');
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro ao limpar cache', e, stack);
      rethrow;
    }
  }

  /// Reseta sincroniza√ß√£o (for√ßa full sync)
  Future<void> resetSync() async {
    try {
      AppLogger.warning('üîÑ Resetando sincroniza√ß√£o');
      // TODO: Resetar timestamp do √∫ltimo sync
      await sync(force: true);
    } catch (e, stack) {
      AppLogger.error('‚ùå Erro ao resetar sync', e, stack);
      rethrow;
    }
  }

  // ============================================
  // üßπ Cleanup
  // ============================================

  void dispose() {
    _syncTimer?.cancel();
    _statusController.close();
  }
}

// ============================================
// üìã Enums
// ============================================

enum SyncStatus {
  idle,
  waitingForConnection,
  syncing,
  uploading,
  downloading,
  success,
  error,
}

// ============================================
// üéØ Riverpod Provider
// ============================================

/// Provider do SyncService
final syncServiceProvider = Provider<SyncService>((ref) {
  final connectivity = ref.watch(connectivityServiceProvider);
  
  final service = SyncService(
    connectivity: connectivity,
  );
  
  ref.onDispose(() => service.dispose());
  return service;
});

/// Provider do status de sync
final syncStatusProvider = StreamProvider<SyncStatus>((ref) {
  final service = ref.watch(syncServiceProvider);
  return service.onSyncStatusChanged;
});
