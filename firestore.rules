rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // 游댏 FUN칂칏ES AUXILIARES
    // ============================================
    
    /// Verifica se o usu치rio est치 autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    /// Verifica se 칠 o pr칩prio usu치rio
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    /// Verifica se os dados obrigat칩rios est칚o presentes
    function hasRequiredFields(fields) {
      return request.resource.data.keys().hasAll(fields);
    }
    
    /// Verifica se n칚o est치 tentando modificar campos protegidos
    function notModifyingProtectedFields(fields) {
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields);
    }
    
    // ============================================
    // 游녻 USERS COLLECTION
    // ============================================
    
    match /users/{userId} {
      // Leitura: apenas o pr칩prio usu치rio
      allow read: if isOwner(userId);
      
      // Cria칞칚o: apenas o pr칩prio usu치rio
      allow create: if isOwner(userId) &&
                      hasRequiredFields(['email', 'displayName', 'createdAt', 'updatedAt']);
      
      // Atualiza칞칚o: apenas o pr칩prio usu치rio, sem modificar createdAt
      allow update: if isOwner(userId) &&
                      notModifyingProtectedFields(['createdAt', 'uid']);
      
      // Dele칞칚o: n칚o permitido (usar soft delete via campo isDeleted)
      allow delete: if false;
    }
    
    // ============================================
    // 游끽 CLIENTS COLLECTION
    // ============================================
    
    match /clients/{clientId} {
      /// Verifica se o usu치rio 칠 dono do cliente
      function isClientOwner() {
        return isAuthenticated() && 
               request.auth.uid == resource.data.userId;
      }
      
      /// Valida dados do cliente
      function isValidClient() {
        return hasRequiredFields(['name', 'type', 'userId', 'status', 'isDeleted']) &&
               request.resource.data.name is string &&
               request.resource.data.name.size() > 0 &&
               request.resource.data.userId == request.auth.uid;
      }
      
      // Leitura: apenas clientes do usu치rio autenticado que n칚o foram deletados
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid &&
                    resource.data.isDeleted == false;
      
      // Cria칞칚o: usu치rio autenticado, valida칞칚o de campos
      allow create: if isAuthenticated() && 
                      isValidClient();
      
      // Atualiza칞칚o: apenas o dono, sem modificar userId e createdAt
      allow update: if isClientOwner() &&
                      notModifyingProtectedFields(['userId', 'createdAt']) &&
                      isValidClient();
      
      // Dele칞칚o: n칚o permitido direto (usar soft delete)
      allow delete: if false;
    }
    
    // ============================================
    // 游닉 CAMPAIGNS COLLECTION
    // ============================================
    
    match /campaigns/{campaignId} {
      /// Verifica se o usu치rio 칠 dono da campanha
      function isCampaignOwner() {
        return isAuthenticated() && 
               request.auth.uid == resource.data.userId;
      }
      
      /// Valida dados da campanha
      function isValidCampaign() {
        return hasRequiredFields(['name', 'clientId', 'userId', 'platform', 'status', 'type', 'isDeleted']) &&
               request.resource.data.name is string &&
               request.resource.data.name.size() > 0 &&
               request.resource.data.userId == request.auth.uid;
      }
      
      /// Verifica se o cliente pertence ao usu치rio
      function isClientOwnedByUser(clientId) {
        return exists(/databases/$(database)/documents/clients/$(clientId)) &&
               get(/databases/$(database)/documents/clients/$(clientId)).data.userId == request.auth.uid;
      }
      
      // Leitura: apenas campanhas do usu치rio que n칚o foram deletadas
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid &&
                    resource.data.isDeleted == false;
      
      // Cria칞칚o: usu치rio autenticado, valida칞칚o de campos, cliente pertence ao usu치rio
      allow create: if isAuthenticated() && 
                      isValidCampaign() &&
                      isClientOwnedByUser(request.resource.data.clientId);
      
      // Atualiza칞칚o: apenas o dono, sem modificar userId/clientId/createdAt
      allow update: if isCampaignOwner() &&
                      notModifyingProtectedFields(['userId', 'clientId', 'createdAt']) &&
                      isValidCampaign();
      
      // Dele칞칚o: n칚o permitido direto (usar soft delete)
      allow delete: if false;
    }
    
    // ============================================
    // 游눯 SALES COLLECTION
    // ============================================
    
    match /sales/{saleId} {
      /// Verifica se o usu치rio 칠 dono da venda
      function isSaleOwner() {
        return isAuthenticated() && 
               request.auth.uid == resource.data.userId;
      }
      
      /// Valida dados da venda
      function isValidSale() {
        return hasRequiredFields(['clientId', 'userId', 'amount', 'status', 'date', 'isDeleted']) &&
               request.resource.data.amount is number &&
               request.resource.data.amount >= 0 &&
               request.resource.data.userId == request.auth.uid &&
               request.resource.data.date is timestamp;
      }
      
      /// Verifica se o cliente pertence ao usu치rio
      function isClientOwnedByUser(clientId) {
        return exists(/databases/$(database)/documents/clients/$(clientId)) &&
               get(/databases/$(database)/documents/clients/$(clientId)).data.userId == request.auth.uid;
      }
      
      // Leitura: apenas vendas do usu치rio que n칚o foram deletadas
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid &&
                    resource.data.isDeleted == false;
      
      // Cria칞칚o: usu치rio autenticado, valida칞칚o de campos, cliente pertence ao usu치rio
      allow create: if isAuthenticated() && 
                      isValidSale() &&
                      isClientOwnedByUser(request.resource.data.clientId);
      
      // Atualiza칞칚o: apenas o dono, sem modificar userId/clientId/createdAt
      allow update: if isSaleOwner() &&
                      notModifyingProtectedFields(['userId', 'clientId', 'createdAt']) &&
                      isValidSale();
      
      // Dele칞칚o: n칚o permitido direto (usar soft delete)
      allow delete: if false;
    }
    
    // ============================================
    // 游늵 ANALYTICS COLLECTION (somente leitura)
    // ============================================
    
    match /analytics/{analyticId} {
      // Leitura: apenas dados do pr칩prio usu치rio
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      // Escrita: n칚o permitida pelo app (apenas via Cloud Functions)
      allow write: if false;
    }
    
    // ============================================
    // 游댒 NOTIFICATIONS COLLECTION
    // ============================================
    
    match /notifications/{notificationId} {
      // Leitura: apenas notifica칞칫es do pr칩prio usu치rio
      allow read: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
      
      // Atualiza칞칚o: apenas para marcar como lida
      allow update: if isAuthenticated() && 
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      // Cria칞칚o e dele칞칚o: n칚o permitidas pelo app
      allow create, delete: if false;
    }
    
    // ============================================
    // 丘뙖잺 SETTINGS COLLECTION
    // ============================================
    
    match /settings/{userId} {
      // Leitura e escrita: apenas o pr칩prio usu치rio
      allow read, write: if isOwner(userId);
    }
    
    // ============================================
    // 游뛂 REGRA PADR츾O: NEGAR TUDO
    // ============================================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
